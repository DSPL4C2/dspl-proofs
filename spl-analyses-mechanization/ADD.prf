(ADD_def)
(ADD_ops)
(real_ADD
 (non_zero_ADD?_TCC1 0
  (non_zero_ADD?_TCC1-1 nil 3704571274 ("" (subtype-tcc) nil nil)
   ((is_real_ADD? const-decl "boolean" real_ADD nil)) nil))
 (to_real_TCC1 0
  (to_real_TCC1-1 nil 3704570901 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil)
    (maybe_real type-decl nil maybe_real nil)
    (ADD type-eq-decl nil ADD_def nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil))
   nil))
 (unary_minus_is_real 0
  (unary_minus_is_real-2 nil 3705178657 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil)
    (ADD type-eq-decl nil ADD_def nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (- const-decl "maybe_real" maybe_real nil)
    (- const-decl "ADD[maybe_real]" real_ADD nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maybe_real type-decl nil maybe_real nil)
    (unary_apply const-decl "ADD[T]" ADD_ops nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil))
   nil)
  (unary_minus_is_real-1 nil 3704570922
   ("" (skeep :preds? t)
    (("" (use "negate_semantics") (("" (grind) nil nil)) nil)) nil)
   ((is_real_ADD? const-decl "boolean" real_ADD nil)
    (ADD type-eq-decl nil ADD_def nil)
    (maybe_real type-decl nil maybe_real nil)
    (variables type-eq-decl nil ADD_def nil)
    (Index type-eq-decl nil arrays "structures/")
    (n formal-const-decl "posnat" real_ADD nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (to_maybe const-decl "maybe_real" maybe_real nil))
   shostak))
 (unary_minus_non_zero 0
  (unary_minus_non_zero-2 nil 3705178691 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil)
    (ADD type-eq-decl nil ADD_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (- const-decl "maybe_real" maybe_real nil)
    (- const-decl "ADD[maybe_real]" real_ADD nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maybe_real type-decl nil maybe_real nil)
    (unary_apply const-decl "ADD[T]" ADD_ops nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil)
    (non_zero_ADD? const-decl "boolean" real_ADD nil))
   nil)
  (unary_minus_non_zero-1 nil 3704571123
   ("" (skeep :preds? t)
    (("" (expand "non_zero_ADD?" *)
      (("" (use "negate_semantics") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((non_zero_ADD? const-decl "boolean" real_ADD nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil)
    (maybe_real type-decl nil maybe_real nil)
    (ADD type-eq-decl nil ADD_def nil))
   shostak))
 (plus_is_real 0
  (plus_is_real-1 nil 3704571294 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil)
    (ADD type-eq-decl nil ADD_def nil)
    (+ const-decl "ADD[maybe_real]" real_ADD nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (+ const-decl "maybe_real" maybe_real nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maybe_real type-decl nil maybe_real nil)
    (apply const-decl "ADD[T]" ADD_ops nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil))
   shostak))
 (minus_is_real 0
  (minus_is_real-1 nil 3704572141 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil)
    (ADD type-eq-decl nil ADD_def nil)
    (- const-decl "ADD[maybe_real]" real_ADD nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (- const-decl "maybe_real" maybe_real nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maybe_real type-decl nil maybe_real nil)
    (apply const-decl "ADD[T]" ADD_ops nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil))
   shostak))
 (mult_is_real 0
  (mult_is_real-1 nil 3704572221 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil)
    (ADD type-eq-decl nil ADD_def nil)
    (* const-decl "ADD[maybe_real]" real_ADD nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (* const-decl "maybe_real" maybe_real nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maybe_real type-decl nil maybe_real nil)
    (apply const-decl "ADD[T]" ADD_ops nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil))
   shostak))
 (mult_non_zero 0
  (mult_non_zero-2 nil 3705258198
   ("" (skeep :preds? t)
    (("" (expand "non_zero_ADD?" *)
      (("" (grind)
        (("" (use "zero_times3") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((non_zero_ADD? const-decl "boolean" real_ADD nil)
    (zero_times3 formula-decl nil real_props nil)
    (is_real? adt-recognizer-decl "[maybe_real -> boolean]" maybe_real
     nil)
    (num adt-accessor-decl "[(is_real?) -> real]" maybe_real nil)
    (ADD type-eq-decl nil ADD_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (apply const-decl "ADD[T]" ADD_ops nil)
    (maybe_real type-decl nil maybe_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (* const-decl "maybe_real" maybe_real nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (* const-decl "ADD[maybe_real]" real_ADD nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil))
   nil)
  (mult_non_zero-1 nil 3704572248
   ("" (skeep :preds? t)
    (("" (use "apply_semantics" ("f" "nzf" "g" "nzg"))
      (("" (inst - "_" "(*)")
        (("" (expand "non_zero_ADD?" *)
          (("" (grind)
            (("" (use "zero_times3") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((non_zero_ADD? const-decl "boolean" real_ADD nil)
    (zero_times3 formula-decl nil real_props nil)
    (is_real? adt-recognizer-decl "[maybe_real -> boolean]" maybe_real
     nil)
    (num adt-accessor-decl "[(is_real?) -> real]" maybe_real nil)
    (ADD type-eq-decl nil ADD_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (apply const-decl "ADD[T]" ADD_ops nil)
    (maybe_real type-decl nil maybe_real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (* const-decl "maybe_real" maybe_real nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (* const-decl "ADD[maybe_real]" real_ADD nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil))
   shostak))
 (div_is_real 0
  (div_is_real-1 nil 3704572805 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil)
    (ADD type-eq-decl nil ADD_def nil)
    (non_zero_ADD? const-decl "boolean" real_ADD nil)
    (/= const-decl "boolean" notequal nil)
    (/ const-decl "ADD[maybe_real]" real_ADD nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (/ const-decl "maybe_real" maybe_real nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maybe_real type-decl nil maybe_real nil)
    (apply const-decl "ADD[T]" ADD_ops nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil))
   shostak))
 (div_non_zero 0
  (div_non_zero-1 nil 3704572851 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (variables type-eq-decl nil ADD_def nil)
    (ADD type-eq-decl nil ADD_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (/ const-decl "ADD[maybe_real]" real_ADD nil)
    (to_maybe const-decl "maybe_real" maybe_real nil)
    (/ const-decl "maybe_real" maybe_real nil)
    (n formal-const-decl "posnat" real_ADD nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maybe_real type-decl nil maybe_real nil)
    (apply const-decl "ADD[T]" ADD_ops nil)
    (is_real_ADD? const-decl "boolean" real_ADD nil)
    (non_zero_ADD? const-decl "boolean" real_ADD nil))
   shostak)))

