("SPLTheory" SPLTheory varAnalyzeModel_TCC2 0 (varAnalyzeModel_TCC2-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory varAnalyzeModel_TCC1 0 (varAnalyzeModel_TCC1-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory projectProperty_TCC4 0 (projectProperty_TCC4-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory projectProperty_TCC3 0 (projectProperty_TCC3-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory projectProperty_TCC2 0 (projectProperty_TCC2-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory projectProperty_TCC1 0 (projectProperty_TCC1-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory projectModel_TCC4 0 (projectModel_TCC4-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory projectModel_TCC3 0 (projectModel_TCC3-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory projectModel_TCC2 0 (projectModel_TCC2-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory projectModel_TCC1 0 (projectModel_TCC1-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory analyzeModel_TCC2 0 (analyzeModel_TCC2-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory analyzeModel_TCC1 0 (analyzeModel_TCC1-1 nil 3734364246 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory commutative_product_family_product 0 (commutative_product_family_product-1 nil 3734364247 ("" (skolem 1 (c _)) (("" (induct vModel) (("1" (skolem 1 product) (("1" (expand sigma) (("1" (expand hatAlpha) (("1" (expand pi) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem 1 (o am1 am2)) (("2" (flatten) (("2" (expand pi 1) (("2" (expand hatAlpha 1) (("2" (expand sigma 1) (("2" (lift-if) (("2" (bddsimp) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skolem 1 (am1 am2)) (("3" (flatten) (("3" (expand pi 1) (("3" (expand alpha 1) (("3" (expand sigma 1) (("3" (expand hatAlpha 1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((AnnotativeModel type-decl nil SPLTheory nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (= const-decl "[T, T -> boolean]" equalities nil) (AnnotativeExpression type-decl nil SPLTheory nil) (PresenceCondition nonempty-type-decl nil SPLTheory nil) (Conf type-eq-decl nil SPLTheory nil) (Property_pred const-decl "[[boolean + real] -> boolean]" SPLTheory nil) (Property nonempty-type-from-decl nil SPLTheory nil) (sigma def-decl "Property" SPLTheory nil) (hatAlpha def-decl "AnnotativeExpression" SPLTheory nil) (Product type-decl nil SPLTheory nil) (alpha def-decl "Property" SPLTheory nil) (pi def-decl "Product" SPLTheory nil) (AnnotativeModel_induction formula-decl nil SPLTheory nil)) shostak))("SPLTheory" SPLTheory hatAlpha_TCC2 0 (hatAlpha_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])" SPLTheory nil)) nil))("SPLTheory" SPLTheory hatAlpha_TCC1 0 (hatAlpha_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])" SPLTheory nil)) nil))("SPLTheory" SPLTheory sigma_TCC4 0 (sigma_TCC4-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])" SPLTheory nil)) nil))("SPLTheory" SPLTheory sigma_TCC3 0 (sigma_TCC3-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])" SPLTheory nil)) nil))("SPLTheory" SPLTheory sigma_TCC2 0 (sigma_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])" SPLTheory nil)) nil))("SPLTheory" SPLTheory sigma_TCC1 0 (sigma_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])" SPLTheory nil)) nil))("SPLTheory" SPLTheory pi_TCC4 0 (pi_TCC4-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])" SPLTheory nil)) nil))("SPLTheory" SPLTheory pi_TCC3 0 (pi_TCC3-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeModel])" SPLTheory nil)) nil))("SPLTheory" SPLTheory alpha_TCC2 0 (alpha_TCC2-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[Product])" SPLTheory nil)) nil))("SPLTheory" SPLTheory alpha_TCC1 0 (alpha_TCC1-1 nil 3734998866 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[Product])" SPLTheory nil)) nil))("SPLTheory" SPLTheory wfRelation_TCC2 0 (wfRelation_TCC2-1 nil 3762261712 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory wfRelation_TCC1 0 (wfRelation_TCC1-1 nil 3762261712 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory wfRelationExp_TCC2 0 (wfRelationExp_TCC2-1 nil 3762261712 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory wfRelationExp_TCC1 0 (wfRelationExp_TCC1-1 nil 3762261712 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory commutative_feature_product_product 0 (commutative_feature_product_product-2 "measure_induction" 3763472700 ("" (skolem 1 (_ c)) (("" (skolem 1 cm) (("" (use "measure_induction[CompositionalModel, AnnotativeModel, top, relation].measure_induction") (("1" (postpone) nil nil) ("2" (use wfRelation) nil nil)) nil)) nil)) nil) nil shostak) (commutative_feature_product_product-1 nil 3762875081 ("" (skolem 1 (cm c)) (("" (expand pi_) (("" (expand foldl) (("" (case "map(LAMBDA (p: Pair):
                            IF (c(pc(p))) THEN ModelBase(pi_(cm(p), c))
                            ELSE ModelBase(emptyproduct)
                            ENDIF,
                          dependents(cm, top(cm)))=null") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (lift-if) (("2" (bddsimp) (("2" (expand pi) (("2" (lift-if) (("2" (bddsimp) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("SPLTheory" SPLTheory analyzeCM_TCC1 0 (analyzeCM_TCC1-1 nil 3762261712 ("" (existence-tcc) nil nil) nil nil))("SPLTheory" SPLTheory pi__TCC1 0 (pi__TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory foldls_TCC2 0 (foldls_TCC2-1 nil 3768310294 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory foldls_TCC1 0 (foldls_TCC1-1 nil 3768310294 ("" (skolem 1 (s x)) (("" (flatten) (("" (lemma finite_sets[AnnotativeModel].card_remove) (("" (instantiate -1 (s x)) (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (finite_remove application-judgement "finite_set" finite_sets nil) (int_minus_int_is_int application-judgement "int" integers nil) (card_remove formula-decl nil finite_sets nil) (AnnotativeModel type-decl nil SPLTheory nil)) nil))("SPLTheory" SPLTheory sigma__TCC1 0 (sigma__TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) nil nil))("SPLTheory" SPLTheory topExp_TCC1 0 (topExp_TCC1-1 nil 3768310294 ("" (existence-tcc) nil nil) nil nil))("SPLTheory" SPLTheory dependentIds_TCC1 0 (dependentIds_TCC1-1 nil 3768310294 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory dependentsEqual_TCC2 0 (dependentsEqual_TCC2-1 nil 3776680358 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory dependentsEqual_TCC1 0 (dependentsEqual_TCC1-1 nil 3776680358 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory dependentesEqual_TCC2 0 (dependentesEqual_TCC2-1 nil 3776764537 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory dependentes_TCC2 0 (dependentes_TCC2-1 nil 3768310294 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory dependentes_TCC1 0 (dependentes_TCC1-1 nil 3768310294 ("" (skeep 1 :preds? t) (("" (expand member) (("" (typepred "cm`ord") (("" (instantiate -2 (n id)) (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (AnnotativeModel type-decl nil SPLTheory nil) (finite_set type-eq-decl nil finite_sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (CompositionalModel type-eq-decl nil SPLTheory nil)) nil))("SPLTheory" SPLTheory dependentesExp_TCC2 0 (dependentesExp_TCC2-1 nil 3769508394 ("" (subtype-tcc) nil nil) nil nil))("SPLTheory" SPLTheory dependentesExp_TCC1 0 (dependentesExp_TCC1-1 nil 3769508394 ("" (skeep 1 :preds? t) (("" (expand member) (("" (typepred "ce`ord") (("" (instantiate -2 (n id)) (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((member const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (AnnotativeExpression type-decl nil SPLTheory nil) (finite_set type-eq-decl nil finite_sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (CompositionalExpression type-eq-decl nil SPLTheory nil)) nil))("SPLTheory" SPLTheory generalizar 0 (generalizar-1 nil 3785091191 ("" (skolem 1 (cm x c "_") :skolem-typepreds? t) (("" (induct ls) (("1" (expand map) (("1" (propax) nil nil)) nil) ("2" (skolem 1 (head tail)) (("2" (flatten) (("2" (expand map 1) (("2" (decompose-equality 1) (("1" (expand hatAlpha 1 2) (("1" (expand hatAlpha 1 2) (("1" (instantiate -3 head) (("1" (expand member -3) (("1" (flatten) (("1" (instantiate -2 "head`idt") (("1" (assert) (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -1) (("1" (postpone) nil nil) ("2" (propax) nil nil) ("3" (skolem 1 pair) (("3" (flatten) (("3" (instantiate -3 pair) (("3" (assert) (("3" (expand member -3 1) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skeep 1 :preds? t) (("3" (instantiate -5 p!1) (("3" (assert) (("3" (expand member -5) (("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("4" (flatten) (("4" (instantiate -4 head) (("4" (expand member) (("4" (flatten) nil nil)) nil)) nil)) nil) ("5" (skeep 1 :preds? t) (("5" (expand fmap 1) (("5" (instantiate -5 p!1) (("5" (assert) (("5" (expand member -5) (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("6" (flatten) (("6" (expand fmap 1) (("6" (instantiate -4 "head") (("6" (assert) (("6" (expand member -4) (("6" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skolem 1 ls) (("3" (flatten) (("3" (skeep 1 :preds? t) (("3" (instantiate -3 p1) (("3" (assert) (("3" (expand member -3) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skolem 1 ls) (("4" (flatten) (("4" (use "every_member[Pair]") nil nil)) nil)) nil) ("5" (skeep 1 :preds? t) (("5" (skeep 1 :preds? t) (("5" (expand fmap 1) (("5" (instantiate -3 p1) (("5" (assert) (("5" (expand member -3) (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("6" (skeep 1 :preds? t) (("6" (expand fmap 1) (("6" (propax) nil nil)) nil)) nil)) nil)) nil) nil shostak))("SPLTheory" SPLTheory generalizar_TCC4 0 (generalizar_TCC4-1 nil 3785090672 ("" (subtype-tcc) nil nil) ((NOT const-decl "[bool -> bool]" booleans nil) (finite_set type-eq-decl nil finite_sets nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (CompositionalModel type-eq-decl nil SPLTheory nil) (PresenceCondition nonempty-type-decl nil SPLTheory nil) (Pair type-eq-decl nil SPLTheory nil) (list type-decl nil list_adt nil) (member def-decl "bool" list_props nil) (AnnotativeExpression type-decl nil SPLTheory nil) (AnnotativeModel type-decl nil SPLTheory nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil) (member const-decl "bool" sets nil)) nil))("SPLTheory" SPLTheory generalizar_TCC3 0 (generalizar_TCC3-1 nil 3785090672 ("" (skosimp) (("" (use "every_member[Pair]") nil nil)) nil) ((list type-decl nil list_adt nil) (every_member formula-decl nil list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (PresenceCondition nonempty-type-decl nil SPLTheory nil) (Pair type-eq-decl nil SPLTheory nil)) nil))("SPLTheory" SPLTheory generalizar_TCC2 0 (generalizar_TCC2-1 nil 3785090672 ("" (subtype-tcc) nil nil) ((NOT const-decl "[bool -> bool]" booleans nil) (finite_set type-eq-decl nil finite_sets nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (CompositionalModel type-eq-decl nil SPLTheory nil) (PresenceCondition nonempty-type-decl nil SPLTheory nil) (Pair type-eq-decl nil SPLTheory nil) (list type-decl nil list_adt nil) (member def-decl "bool" list_props nil) (AnnotativeExpression type-decl nil SPLTheory nil) (AnnotativeModel type-decl nil SPLTheory nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil) (member const-decl "bool" sets nil)) nil))("SPLTheory" SPLTheory generalizar_TCC1 0 (generalizar_TCC1-1 nil 3785090672 ("" (subtype-tcc) nil nil) ((AnnotativeExpression type-decl nil SPLTheory nil) (AnnotativeModel type-decl nil SPLTheory nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (fmap const-decl "CompositionalThing[U]" CompositionalFunctor nil)) nil))("SPLTheory" SPLTheory sigmaLift_TCC2 0 (sigmaLift_TCC2-1 nil 3762261712 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[LiftedAnnotativeExpression])" SPLTheory nil)) nil))("SPLTheory" SPLTheory sigmaLift_TCC1 0 (sigmaLift_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[LiftedAnnotativeExpression])" SPLTheory nil)) nil))("SPLTheory" SPLTheory lift_TCC2 0 (lift_TCC2-1 nil 3762261712 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])" SPLTheory nil)) nil))("SPLTheory" SPLTheory lift_TCC1 0 (lift_TCC1-1 nil 3762261712 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(strict_well_founded?[AnnotativeExpression])" SPLTheory nil)) nil))