SPLTheory : THEORY
BEGIN

  Product : TYPE+
  emptyproduct : Product
  nonemptyproduct?(p:Product) : bool = p /= emptyproduct

  Property: TYPE+
  emptyproperty : Property
  nonemptyproperty?(p:Property) : bool = p /= emptyproperty

  alpha: {f:[Product -> Property] | f(emptyproduct)=emptyproperty}

  PresenceCondition: TYPE+
  truepc : PresenceCondition
  Conf: TYPE = set[PresenceCondition]

  AnnotativeModel : DATATYPE
  BEGIN
     ModelBase(m:Product): ModelBase?
     ModelChoice(pc:PresenceCondition,
                 vm1:AnnotativeModel,
                 vm2:AnnotativeModel): ModelChoice?
  END AnnotativeModel

  pi(vm:AnnotativeModel,c:Conf): RECURSIVE Product =
    CASES vm OF
      ModelBase(m): m,
      ModelChoice(pc, vm1, vm2):
        IF c(pc) THEN pi(vm1,c)
	             ELSE pi(vm2,c)
	    ENDIF
    ENDCASES
  MEASURE vm by <<

  AnnotativeExpression : DATATYPE
  BEGIN
     BaseExpression(p:Property): BaseExpression?
     ChoiceExpression(pc:PresenceCondition,
                      vp1:AnnotativeExpression,
                      vp2:AnnotativeExpression): ChoiceExpression?
  END AnnotativeExpression  

  sigma(vp:AnnotativeExpression,c:Conf): RECURSIVE Property =
    CASES vp OF
      BaseExpression(p): p,
      ChoiceExpression(pc, vp1, vp2):
        IF c(pc) THEN sigma(vp1,c)
	             ELSE sigma(vp2,c)
	    ENDIF
    ENDCASES
  MEASURE vp by <<

  hatAlpha(vm:AnnotativeModel): RECURSIVE AnnotativeExpression =
    CASES vm OF
      ModelBase(m): BaseExpression(alpha(m)),
      ModelChoice(pc, vm1, vm2): ChoiceExpression(pc, hatAlpha(vm1), hatAlpha(vm2))
    ENDCASES
  MEASURE vm by <<

  conf: VAR Conf
  vModel, am : VAR AnnotativeModel
  l : VAR list[AnnotativeModel]
  commutative_product_family_product: THEOREM
    sigma(hatAlpha(vModel),conf) = alpha(pi(vModel,conf))

  %% COMPOSITIONAL

  partialModelComposition: [AnnotativeModel, AnnotativeModel -> AnnotativeModel]
  partialExpComposition: [AnnotativeExpression, AnnotativeExpression -> AnnotativeExpression]

  m1, m2 : VAR AnnotativeModel
  n : VAR nat

  isomorphismModelExp: AXIOM
    hatAlpha(partialModelComposition(m1,m2)) = partialExpComposition(hatAlpha(m1),hatAlpha(m2))



  IMPORTING CompositionalThings[nat]
  CompositionalModel : TYPE  = CompositionalThing[AnnotativeModel]
  cModel,cm : VAR CompositionalModel
  Pair : TYPE =  [# pc : PresenceCondition, idt : nat #]


  getPC(am) : PresenceCondition =
    CASES am OF
      ModelBase(m): truepc,
      ModelChoice(pc, vm1, vm2): pc
    ENDCASES

  getPCi(cm:CompositionalModel, id : { n:nat | member(n,cm`idt) }) : PresenceCondition =
    getPC(cm`E(id))

  finitePairs: JUDGEMENT
  FORALL (cm:CompositionalModel,id : { n:nat | member(n,cm`idt) } ):
  {p: Pair |
              EXISTS (pc: PresenceCondition, n: nat):
                cm`ord(n, id) AND p`idt = n AND p`pc = getPCi(cm, n)} HAS_TYPE (is_finite[Pair])

  dependentes(cm:CompositionalModel, id : {n:nat | member(n,cm`idt)} ) : finite_sets[Pair].finite_set =
    {p: Pair | EXISTS (pc:PresenceCondition, n:nat) : cm`ord(n,id) AND p`idt=n AND p`pc = getPCi(cm,n)}

  set2list(s: finite_sets[Pair].finite_set) : RECURSIVE {l:list[Pair] | length(l) = card(s) AND 
				                                                        FORALL (x:Pair): s(x) IFF member(x,l)} =
    IF empty?(s) THEN null
                 ELSE cons(choose(s), set2list(rest(s)))
    ENDIF
  MEASURE card(s)

  dependents(cm:CompositionalModel, id : {n:nat | member(n,cm`idt)} ) : list[Pair] =
    set2list(dependentes(cm,id))

  memberDependents: LEMMA
    FORALL (cm: CompositionalModel,
            id: {n: nat | member(n,cm`idt)},
            p: {x: Pair | member(x,dependents(cm,id))}):
        (EXISTS (pc:PresenceCondition, n:nat) : cm`ord(n,id) AND p`idt=n AND p`pc = getPCi(cm,n))


  foldl(f: [AnnotativeModel, AnnotativeModel -> AnnotativeModel],
        am: AnnotativeModel,
        l: list[AnnotativeModel]) : RECURSIVE AnnotativeModel =
    CASES l OF
      null: am,
      cons(x, xs): foldl(f, f(am,x), xs)
    ENDCASES
  MEASURE length(l)

  

  pi_r(cm:CompositionalModel, idt:(cm`idt), c:Conf) : RECURSIVE Product =
    pi(
	    foldl(
	        partialModelComposition,
	        cm`E(idt),
	        map(
                LAMBDA(p: {par: Pair | member(par,dependents(cm, idt))}):
                IF (c(p`pc)) THEN
                    ModelBase(pi_r(cm, p`idt, c))
                ELSE ModelBase(emptyproduct) ENDIF,
	            dependents(cm, idt)
	        )
	    ),
        c
    )
  MEASURE idt BY ord(cm)

  pi_(cm:CompositionalModel, c:Conf) : Product =
    pi_r(cm, cm`top, c)

  CompositionalExpression : TYPE  = CompositionalThing[AnnotativeExpression]
  cExp, ce : VAR CompositionalExpression

  getPC(ae: AnnotativeExpression) : PresenceCondition =
    CASES ae OF
      BaseExpression(p): truepc,
      ChoiceExpression(pc, vm1, vm2): pc
    ENDCASES

  getPCi(ce: CompositionalExpression, id: {n:nat | member(n,ce`idt)}) : PresenceCondition =
    getPC(ce`E(id))

  finitePairsExp: JUDGEMENT
    FORALL (ce: CompositionalExpression, id: {n:nat | member(n,ce`idt)}):
      {p: Pair | EXISTS (pc: PresenceCondition, n: nat): ce`ord(n, id) AND p`idt = n AND p`pc = getPCi(ce, n)}
          HAS_TYPE (is_finite[Pair])

  dependentesExp(ce:CompositionalExpression, id : { n:nat | member(n,ce`idt) } ) : finite_sets[Pair].finite_set =
    {p: Pair | EXISTS (pc:PresenceCondition, n:nat) : ce`ord(n,id) AND p`idt = n AND p`pc = getPCi(ce,n)}

  dependentsExp(ce:CompositionalExpression, id: {n:nat | member(n,ce`idt)}) : list[Pair] =
    set2list(dependentesExp(ce,id))

  memberDependentsExp: LEMMA
    FORALL (ce: CompositionalExpression, id: {n:nat | member(n,ce`idt)}, p:{ x:Pair | member(x,dependentsExp(ce,id))}):
        (EXISTS (pc: PresenceCondition, n: nat) : ce`ord(n,id) AND p`idt = n AND p`pc = getPCi(ce,n))

  foldlExp(f: [AnnotativeExpression, AnnotativeExpression -> AnnotativeExpression],
           ae: AnnotativeExpression,
           l: list[AnnotativeExpression]) : RECURSIVE AnnotativeExpression =
    CASES l OF
      null: ae,
      cons(x, xs): foldlExp(f, f(ae,x), xs)
    ENDCASES
  MEASURE length(l)

  sigma_r(ce: CompositionalExpression, idt: (ce`idt), c: Conf) : RECURSIVE Property =
    sigma(
	    foldlExp(
	        partialExpComposition,
	        ce`E(idt),
	        map(
                LAMBDA(p: {par: Pair | member(par,dependentsExp(ce, idt))}):
                  IF (c(p`pc)) THEN BaseExpression(sigma_r(ce, p`idt, c))
                               ELSE BaseExpression(emptyproperty)
                  ENDIF,
	            dependentsExp(ce, idt)
	        )
	    ),
        c
    )
  MEASURE idt BY ord(ce)

  sigma_(ce: CompositionalExpression, c: Conf) : Property =
    sigma_r(ce, ce`top, c)


  IMPORTING CompositionalFunctor[nat,AnnotativeModel,AnnotativeExpression]
  analyzeCM(cm) : CompositionalExpression = fmap(hatAlpha,cm)

  getPCequal: LEMMA getPC(cm`E(n)) = getPC(hatAlpha(E(cm)(n)))

  topEqual : LEMMA cm`top = fmap(hatAlpha, cm)`top

  dependentesEqual: LEMMA FORALL (n:nat | member(n, cm`idt)): dependentes(cm, n) = dependentesExp(fmap(hatAlpha, cm), n)

  dependentsEqual: LEMMA FORALL (n:nat | member(n, cm`idt)):  dependents(cm, n) = dependentsExp(fmap(hatAlpha, cm), n)

  isomorphismModelExpList: AXIOM foldlExp(partialExpComposition, hatAlpha(am), map(hatAlpha,l)) = hatAlpha(foldl(partialModelComposition, am, l))


  IMPORTING list_aux_map_props,
            list_map_type_compatibility

  map_of_hatAlpha: LEMMA
    FORALL(cm:CompositionalModel,x:(cm`idt),c:Conf,ls:list[Pair]):
      (FORALL (y: (cm`idt)):
        cm`ord(y, x) IMPLIES
         sigma_r(fmap(hatAlpha, cm), y, c) = alpha(pi_r(cm, y, c)))
      AND
      (FORALL(p:Pair):member(p,ls) IMPLIES member(p`idt, cm`idt) AND cm`ord(p`idt,x))
      IMPLIES
          map(
              LAMBDA (p: {par: Pair | member(par,ls)}):
                IF (c(p`pc)) THEN BaseExpression(sigma_r(fmap(hatAlpha, cm), p`idt, c))
                             ELSE BaseExpression(emptyproperty)
                ENDIF,
              ls
          )
           =
          map(hatAlpha,
              map(
                  LAMBDA (p: {par: Pair | member(par, ls)}):
                    IF (c(p`pc)) THEN ModelBase(pi_r(cm, p`idt, c))
                                 ELSE ModelBase(emptyproduct)
                    ENDIF,
                  ls
              )
          )

  commutative_feature_product_product: THEOREM
    sigma_(analyzeCM(cModel), conf) = alpha(pi_(cModel, conf))


END SPLTheory
