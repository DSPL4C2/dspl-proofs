(length (length_TCC1 0
         (length_TCC1-1 nil 3800081215 ("" (termination-tcc) nil nil)
          ((real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (reduce_nat adt-def-decl "[mylist -> nat]" mylist_adt nil))
          nil))
        (append_TCC1 0
         (append_TCC1-1 nil 3800081215 ("" (termination-tcc) nil nil)
          ((real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (length def-decl "nat" length nil))
          nil))
        (length_append 0
         (length_append-1 nil 3800081270
          ("" (induct "l1")
           (("1" (skeep)
             (("1" (expand "append")
               (("1" (expand "length") (("1" (propax) nil nil)) nil))
               nil))
             nil)
            ("2" (skeep)
             (("2" (skeep)
               (("2" (inst -1 "l2")
                 (("2" (expand "append" 1)
                   (("2" (expand "length" 1 (1 3))
                     (("2" (propax) nil nil)) nil))
                   nil))
                 nil))
               nil))
             nil))
           nil)
          ((mylist_induction formula-decl nil mylist_adt nil)
           (T formal-type-decl nil length nil)
           (append def-decl "mylist[T]" length nil)
           (length def-decl "nat" length nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (>= const-decl "bool" reals nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (number nonempty-type-decl nil numbers nil)
           (boolean nonempty-type-decl nil booleans nil)
           (mylist type-decl nil mylist_adt nil))
          shostak)))

